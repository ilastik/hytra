# ===========================================================================================
# Pipeline configuration template for Cell Tracking Challenge Datasets
# 
# Use "create_config.py --in config_template_ctc.ini --out myconfig.ini myparam1 value myparam2 value"
# where all "myparam"s will be put into this template where you see {{ myparam1 }} etc.
#
# Required template parameters are:
#	outDir
#	ilp
#	datasetDir
#	sequence
#	trackingExecutable
#
# Parameters are shared across different parts of the pipeline, 
# so they only need to be specified once. They are included nevertheless
# commented out, to demonstrate which part of the pipeline needs what input.
# ===========================================================================================

# -------------------------------------------------------------------------------------------
# configure which parts of the pipeline should be run by commenting in/out these lines
# -------------------------------------------------------------------------------------------

do-ctc-groundtruth-conversion
do-ctc-raw-data-conversion
do-ctc-segmentation-conversion
do-train-transition-classifier
do-create-graph
do-tracking
do-merger-resolving
export-format = ctc # can be "ilastikH5", "ctc", "labelimage", or commented out => no export conversion

# uncomment this for debug information
verbose

# -------------------------------------------------------------------------------------------
# CTC: ground truth conversion
# -------------------------------------------------------------------------------------------

# flags:
ctc-to-gt-single-frames
ctc-to-gt-index-remapping

# input:
ctc-track-input-tif = {{ datasetDir }}/{{ sequence }}_GT/TRA/man_track*.tif
ctc-track-input-txt = {{ datasetDir }}/{{ sequence }}_GT/TRA/man_track.txt

# output:
groundtruth = {{ outDir }}/groundtruth/

# -------------------------------------------------------------------------------------------
# CTC: raw data conversion
# -------------------------------------------------------------------------------------------

# input:
ctc-raw-input-tif = {{ datasetDir }}/{{ sequence }}/t*.tif

# output:
raw-data-file = {{ outDir }}/raw.h5
raw-data-path = exported_data

# -------------------------------------------------------------------------------------------
# CTC: segmentation conversion
# -------------------------------------------------------------------------------------------

# input:
ctc-segmentation-input-tif-pattern = {{ datasetDir }}/{{ sequence }}_SEG/seg*.tif

# output:
label-image-file = {{ outDir }}/segmentation.h5
label-image-path = /TrackingFeatureExtraction/LabelImage/0000/[[%d, 0, 0, 0, 0], [%d, %d, %d, %d, 1]]

# -------------------------------------------------------------------------------------------
# transition classifier training
# -------------------------------------------------------------------------------------------

# input:
# groundtruth = {{ outDir }}/groundtruth/
# raw-data-file = {{ outDir }}/raw.h5
# raw-data-path = exported_data
time-axis-index = 0
filename-zero-padding = 4

# output:
transition-classifier-file = {{ outDir }}/transitionClassifier.h5

# -------------------------------------------------------------------------------------------
# hypotheses-graph-creation
# -------------------------------------------------------------------------------------------

# input:
method = conservation
without-tracklets
max-nearest-neighbors = 1
max-number-objects = 1
min-size = 50
# raw-data-file = {{ outDir }}/raw.h5
# raw-data-path = exported_data
# label-image-file = {{ outDir }}/segmentation.h5
# label-image-path = /TrackingFeatureExtraction/LabelImage/0000/[[%d, 0, 0, 0, 0], [%d, %d, %d, %d, 1]]
# transition-classifier-file = {{ outDir }}/transitionClassifier.h5
division-classifier-file = {{ ilp }}
object-count-classifier-file = {{ ilp }}
disable-multiprocessing

# output:
graph-json-file = {{ outDir }}/graph.json

# -------------------------------------------------------------------------------------------
# tracking
# -------------------------------------------------------------------------------------------

# input:
# graph-json-file = {{ outDir }}/graph.json
weight-json-file = {{ outDir }}/weights.json
tracking-executable = {{ trackingExecutable }}

# output:
result-json-file = {{ outDir }}/result.json

# -------------------------------------------------------------------------------------------
# merger resolving
# -------------------------------------------------------------------------------------------

# output:
out-graph-json-file = {{ outDir }}/out-graph.json
out-label-image-file = {{ outDir }}/out-label-image.h5
out-result-json-file = {{ outDir }}/out-result.json

# -------------------------------------------------------------------------------------------
# result export: H5 events
# -------------------------------------------------------------------------------------------

# input:

# graph-json-file = {{ outDir }}/out-graph.json
# result-json-file = {{ outDir }}/out-result.json
# label-image-file = {{ outDir }}/out-label-image.h5
# label-image-path = /TrackingFeatureExtraction/LabelImage/0000/[[%d, 0, 0, 0, 0], [%d, %d, %d, %d, 1]]

# output:
h5-event-out-dir = {{ outDir }}/events

# -------------------------------------------------------------------------------------------
# result export: ctc
# -------------------------------------------------------------------------------------------

# input:
h5-event-label-image-path = segmentation/labels
h5-event-input-file-pattern = {{ outDir }}/events/*.h5
# h5-group-zero-pad-length = 4 # only needed if the events were stored as single HDF5 file

# output:
ctc-filename-zero-pad-length = 3
ctc-output-dir = {{ outDir }}/ctc_RES

# -------------------------------------------------------------------------------------------
# result export: labelimage
# -------------------------------------------------------------------------------------------

# input:

# graph-json-file = {{ outDir }}/out-graph.json
# result-json-file = {{ outDir }}/out-result.json
# label-image-file = {{ outDir }}/out-label-image.h5
# label-image-path = /TrackingFeatureExtraction/LabelImage/0000/[[%d, 0, 0, 0, 0], [%d, %d, %d, %d, 1]]

# output:
label-image-out = {{ outDir }}/resultLabelimage.h5
